{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react_practice\\\\udemy-projects-again\\\\user-manager\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NewUser from \"./components/Users/NewUser\";\nimport UsersList from \"./components/Users/UsersList\";\n\n/*\nThis component contains the form for creating a new\nuser, as well as the list of users added.\n\nWe need a state to determine whether or not usersList\nshould be displayed.\n*/\n\n/*\nWe need to get the entered values from NewUser.js, put them\ninto an array of objects, and copy all the previous values\nback in afterwards (with unShift function).\n\nwe can create an array that holds these values, which we\ncan feed into UsersList? YES but this needs to be a state\nsince the list will be updated with each user added to it.\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //this state will communicate with child to receive new user\n  const [usersList, setUsersList] = useState([]);\n  const saveUserHandler = userData => {\n    /*This wil take user data passed into\n    this function (from NewUser.js)\n    \n    In this case, userData is the newUser object\n    from NewUser.js. Now we need to extract those\n    props from userData into a new object, and \n    add it to usersList array, along with all previous\n    items.\n    */\n\n    setUsersList(previousUsers => {\n      /*\n      userData is the object so we just add it plainly.\n      previousUsers is the array of all previous user\n      objects, therefore we need the spread operator.\n      \n      */\n      return [...previousUsers, userData.key];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewUser, {\n      onSaveUser: saveUserHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UsersList, {\n      users: usersList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rCuhwovjWVqRB5NhAf7v+2So/Rg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","NewUser","UsersList","App","usersList","setUsersList","saveUserHandler","userData","previousUsers","key"],"sources":["C:/workspace/react_practice/udemy-projects-again/user-manager/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport NewUser from \"./components/Users/NewUser\";\nimport UsersList from \"./components/Users/UsersList\";\n\n/*\nThis component contains the form for creating a new\nuser, as well as the list of users added.\n\nWe need a state to determine whether or not usersList\nshould be displayed.\n*/\n\n/*\nWe need to get the entered values from NewUser.js, put them\ninto an array of objects, and copy all the previous values\nback in afterwards (with unShift function).\n\nwe can create an array that holds these values, which we\ncan feed into UsersList? YES but this needs to be a state\nsince the list will be updated with each user added to it.\n*/\n\n\nfunction App() {\n  //this state will communicate with child to receive new user\n  const [usersList, setUsersList] = useState([]);\n  \n  const saveUserHandler = (userData) => {\n    /*This wil take user data passed into\n    this function (from NewUser.js)\n    \n    In this case, userData is the newUser object\n    from NewUser.js. Now we need to extract those\n    props from userData into a new object, and \n    add it to usersList array, along with all previous\n    items.\n    */\n\n    setUsersList((previousUsers => {\n      /*\n      userData is the object so we just add it plainly.\n      previousUsers is the array of all previous user\n      objects, therefore we need the spread operator.\n      \n      */\n      return [...previousUsers, userData.key]\n    }));\n\n  }\n\n  return (\n    <div>\n      <NewUser onSaveUser={saveUserHandler}/>\n      <UsersList users={usersList}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,OAAO,MAAM,4BAA4B;AAChD,OAAOC,SAAS,MAAM,8BAA8B;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMM,eAAe,GAAIC,QAAQ,IAAK;IACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEIF,YAAY,CAAEG,aAAa,IAAI;MAC7B;AACN;AACA;AACA;AACA;AACA;MACM,OAAO,CAAC,GAAGA,aAAa,EAAED,QAAQ,CAACE,GAAG,CAAC;IACzC,CAAC,CAAE;EAEL,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,OAAO;MAAC,UAAU,EAAEH;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAE,eACvC,QAAC,SAAS;MAAC,KAAK,EAAEF;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1B;AAEV;AAAC,GAjCQD,GAAG;AAAA,KAAHA,GAAG;AAmCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}