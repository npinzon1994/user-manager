{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react_practice\\\\udemy-projects-again\\\\user-manager\\\\src\\\\components\\\\Users\\\\NewUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport classes from \"./NewUser.module.css\";\nimport Card from \"../UI/Card.js\";\nimport Button from \"../UI/Button\";\nimport Modal from \"../UI/Modal\";\nimport Wrapper from \"../Helpers/Wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewUser = props => {\n  _s();\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n\n  //need state to capture user input\n  const [enteredUsername, setEnteredUsername] = useState(\"\");\n  const [enteredAge, setEnteredAge] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  /*\r\n  Could check to see if entered username in empty,\r\n  in which case we could make the label and input\r\n  appear red. We can simply return if the user \r\n  entered nothing, and then return the entered username\r\n  if the field is valid.\r\n  */\n  const usernameChangeHandler = event => {\n    setEnteredUsername(event.target.value);\n  };\n  const ageChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n  const addUserHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      setMessage(\"Please enter a username or age!\");\n      setIsModalVisible(true);\n      return;\n    }\n\n    /*\r\n    enteredAge was collected from an input and is \r\n    therefore a string. JS allows you to compare strings\r\n    and numbers, but it's a better practice to force-\r\n    convert to a number so we're comparing two values\r\n    of the same type.\r\n    */\n    if (+enteredAge < 1) {\n      setMessage(\"Age cannot be less than 1!\");\n      setIsModalVisible(true);\n      return;\n    }\n\n    /*Now pass it up to App.js through props.\r\n    We have to pass to App.js because that's this\r\n    component's direct parent. App.js is where we\r\n    actually create the object.\r\n    */\n    props.onSaveUser(enteredUsername, enteredAge);\n    setEnteredUsername(\"\");\n    setEnteredAge(\"\");\n  };\n  const closeModalHandler = () => {\n    setIsModalVisible(false);\n  };\n\n  //only display modal if isModalVisible\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [isModalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Error!\",\n      message: message,\n      onClose: closeModalHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.input,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addUserHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\",\n          onChange: usernameChangeHandler,\n          value: enteredUsername,\n          ref: nameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"age\",\n          children: \"Age (Years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"age\",\n          type: \"number\",\n          onChange: ageChangeHandler,\n          value: enteredAge,\n          ref: ageInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onClick: addUserHandler,\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(NewUser, \"tROff0QxpFvh8YsiSblrIgTkGAA=\");\n_c = NewUser;\nexport default NewUser;\nvar _c;\n$RefreshReg$(_c, \"NewUser\");","map":{"version":3,"names":["React","useState","useRef","classes","Card","Button","Modal","Wrapper","NewUser","props","nameInputRef","ageInputRef","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","isModalVisible","setIsModalVisible","message","setMessage","usernameChangeHandler","event","target","value","ageChangeHandler","addUserHandler","preventDefault","enteredName","current","trim","length","onSaveUser","closeModalHandler","input"],"sources":["C:/workspace/react_practice/udemy-projects-again/user-manager/src/components/Users/NewUser.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport classes from \"./NewUser.module.css\";\r\nimport Card from \"../UI/Card.js\";\r\nimport Button from \"../UI/Button\";\r\nimport Modal from \"../UI/Modal\";\r\nimport Wrapper from \"../Helpers/Wrapper\";\r\n\r\nconst NewUser = (props) => {\r\n  const nameInputRef = useRef();\r\n  const ageInputRef = useRef();\r\n  \r\n  //need state to capture user input\r\n  const [enteredUsername, setEnteredUsername] = useState(\"\");\r\n  const [enteredAge, setEnteredAge] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  /*\r\n  Could check to see if entered username in empty,\r\n  in which case we could make the label and input\r\n  appear red. We can simply return if the user \r\n  entered nothing, and then return the entered username\r\n  if the field is valid.\r\n  */\r\n  const usernameChangeHandler = (event) => {\r\n    setEnteredUsername(event.target.value);\r\n  };\r\n\r\n  const ageChangeHandler = (event) => {\r\n    setEnteredAge(event.target.value);\r\n  };\r\n\r\n  const addUserHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredName = nameInputRef.current.value;\r\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\r\n      setMessage(\"Please enter a username or age!\");\r\n      setIsModalVisible(true);\r\n      return;\r\n    }\r\n\r\n    /*\r\n    enteredAge was collected from an input and is \r\n    therefore a string. JS allows you to compare strings\r\n    and numbers, but it's a better practice to force-\r\n    convert to a number so we're comparing two values\r\n    of the same type.\r\n    */\r\n    if (+enteredAge < 1) {\r\n      setMessage(\"Age cannot be less than 1!\");\r\n      setIsModalVisible(true);\r\n      return;\r\n    }\r\n\r\n    /*Now pass it up to App.js through props.\r\n    We have to pass to App.js because that's this\r\n    component's direct parent. App.js is where we\r\n    actually create the object.\r\n    */\r\n    props.onSaveUser(enteredUsername, enteredAge);\r\n\r\n    setEnteredUsername(\"\");\r\n    setEnteredAge(\"\");\r\n  };\r\n\r\n  const closeModalHandler = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  //only display modal if isModalVisible\r\n  return (\r\n    <Wrapper>\r\n      {isModalVisible && (\r\n        <Modal title=\"Error!\" message={message} onClose={closeModalHandler} />\r\n      )}\r\n      <Card className={classes.input}>\r\n        <form onSubmit={addUserHandler}>\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            id=\"username\"\r\n            type=\"text\"\r\n            onChange={usernameChangeHandler}\r\n            value={enteredUsername}\r\n            ref={nameInputRef}\r\n          />\r\n\r\n          <label htmlFor=\"age\">Age (Years)</label>\r\n          <input\r\n            id=\"age\"\r\n            type=\"number\"\r\n            onChange={ageChangeHandler}\r\n            value={enteredAge}\r\n            ref={ageInputRef}\r\n          />\r\n\r\n          <Button type=\"submit\" onClick={addUserHandler}>\r\n            Add User\r\n          </Button>\r\n        </form>\r\n      </Card>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default NewUser;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}